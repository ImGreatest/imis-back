// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id         Int       @unique @default(autoincrement())
  name       String    @db.VarChar()
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  Permission Permission[]
  User       User[]

  @@map("roles")
}
model Permission {
  id         Int     @unique @default(autoincrement())
  role       UserRole    @relation(fields: [role_id], references: [id])
  role_id    Int     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  @@map("permissions")
}
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String
  surname String
  role    UserRole @relation(fields: [role_id], references: [id])
  role_id Int  @db.Integer()
  pass String
  course Int?
  direction String?
  group String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?

  userSkils UserSkills[]
  projects UserProject[]
  success Success[]
  favoritProject UserFavoritProject[]
  company Company?
  themes Theme[]
}

model Company {
  id    Int     @default(autoincrement()) @id
  name String @unique
  description String

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?

  spokesPerson User @relation(fields: [spokesPersonId], references: [id])
  spokesPersonId Int @unique

  themes Theme[]
}

model Theme {
  id Int @default(autoincrement()) @id
  name String @unique
  descripton String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?
  company Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  student User? @relation(fields: [studentId],references: [id])
  studentId Int?
}

model Project {
  id Int @default(autoincrement()) @id
  name String @unique
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?
  
  descripton String

  projectSkils ProjectSkils[]
  users UserProject[]
  usersWithFavor UserFavoritProject[]

}

model Skills {
  id Int @default(autoincrement()) @id
  name String @unique

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?

  projectSkils ProjectSkils[]
  userSkils UserSkills[]
}

model ProjectSkils{
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  skils Skills @relation(fields: [skilsId], references: [id])
  skilsId Int
  @@id([projectId,skilsId])
}

model UserSkills{
  user User @relation(fields: [userId], references: [id])
  userId Int
  skils Skills @relation(fields: [skilsId], references: [id])
  skilsId Int
  @@id([userId,skilsId])
}

model UserProject{
  user User @relation(fields: [userId], references: [id])
  userId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  @@id([userId,projectId])

}
model UserFavoritProject{
  user User @relation(fields: [userId], references: [id])
  userId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  @@id([userId,projectId])
}
model Success{
  id Int @default(autoincrement()) @id
  name String @unique
  description String
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?
  
  user User @relation(fields: [userId],references: [id])
  userId Int

  tags SuccessTags[]
}

model Tag{
  id Int @id @default(autoincrement())
  name String @unique
  description String
  baseTag Tag? @relation("BaseTag", fields: [baseTagId], references: [id])
  baseTagId Int?
  childTags Tag[] @relation("BaseTag")

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime?
  
  success SuccessTags[]

}

model SuccessTags{
  success Success @relation(fields: [successId], references: [id])
  successId Int
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int
  @@id([successId,tagId])

}