// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserRole {
  id         Int       @unique @default(autoincrement())
  name       String   @unique @db.VarChar()
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  Permission Permission[]
  User       User[]

  @@map("roles")
}
model Permission {
  id         Int     @unique @default(autoincrement())
  role       UserRole    @relation(fields: [roleId], references: [id])
  roleId    Int     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  @@map("permissions")
}
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique @db.VarChar()
  name  String @db.VarChar(100)
  surname String @db.VarChar(100)
  role    UserRole @relation(fields: [roleId], references: [id])
  roleId Int  @db.Integer()
  pass String @db.VarChar()
  course Int? @db.Integer()
  direction String? @db.VarChar(50)
  group String? @db.VarChar(50)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()

  userSkils UserSkills[]
  projects UserProject[]
  createdProjects Project[]
  success Success[]
  favoritProject UserFavoritProject[]
  company Company?
  themes Theme[]
  ratings Rating[]
  score Score[]
  sendedNotifications Notifacation[] @relation("sender")
  getNotifications Notifacation[] @relation("recipient")
}

model Notifacation{
  sender User @relation(fields: [senderId], references: [id], name: "sender")
  senderId Int @db.Integer()
  recipient User @relation(fields: [recipientId], references: [id], name: "recipient")
  recipientId Int @db.Integer()
  @@id([senderId,recipientId])
    
}
model Rating{
  id    Int     @default(autoincrement()) @id
  name String @db.VarChar()
  minuteUpdate Int @db.Integer() @default(0)
  creater User @relation(fields: [createrId], references: [id])
  createrId Int @db.Integer()
  score Score[]
  ratingScope RatingScope[]
  
}
model RatingScope{
  rating Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  ratingId Int @db.Integer()
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int @db.Integer()
  ratingScore Int @db.Integer
  @@id([ratingId,tagId])

}
model Score{
  rating Rating @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  ratingId Int @db.Integer()
  student User @relation(fields: [studentId],references: [id])
  studentId Int @db.Integer
  ratingScore Int @db.Integer
  @@id([ratingId,studentId])

}
model Company {
  id    Int     @default(autoincrement()) @id
  name String @unique @db.VarChar()
  description String @db.VarChar()

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()

  spokesPerson User @relation(fields: [spokesPersonId], references: [id])
  spokesPersonId Int @unique @db.Integer()

  themes Theme[]
}

model Theme {
  id Int @default(autoincrement()) @id
  name String @unique @db.VarChar()
  descripton String @db.VarChar()
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()
  company Company? @relation(fields: [companyId], references: [id])
  companyId Int? @db.Integer()
  student User? @relation(fields: [studentId],references: [id])
  studentId Int? @db.Integer()
}

model Project {
  id Int @default(autoincrement()) @id
  name String @unique @db.VarChar()
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()
  status String @db.VarChar()
  descripton String @db.VarChar()
  creater User @relation(fields: [createrId],references: [id])
  createrId Int @db.Integer
  projectSkils ProjectSkils[]
  users UserProject[]
  usersWithFavor UserFavoritProject[]

}

model Skills {
  id Int @default(autoincrement()) @id
  name String @unique @db.VarChar()

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()

  projectSkils ProjectSkils[]
  userSkils UserSkills[]
}

model ProjectSkils{
  project Project @relation(fields: [projectId], references: [id])
  projectId Int @db.Integer()
  skils Skills @relation(fields: [skilsId], references: [id])
  skilsId Int @db.Integer()
  @@id([projectId,skilsId])
}

model UserSkills{
  user User @relation(fields: [userId], references: [id])
  userId Int @db.Integer()
  skils Skills @relation(fields: [skilsId], references: [id])
  skilsId Int @db.Integer()
  @@id([userId,skilsId])
}

model UserProject{
  user User @relation(fields: [userId], references: [id])
  userId Int @db.Integer()
  project Project @relation(fields: [projectId], references: [id])
  projectId Int @db.Integer()
  @@id([userId,projectId])

}
model UserFavoritProject{
  user User @relation(fields: [userId], references: [id])
  userId Int @db.Integer()
  project Project @relation(fields: [projectId], references: [id])
  projectId Int @db.Integer()
  @@id([userId,projectId])
}
model Success{
  id Int @default(autoincrement()) @id
  name String @unique @db.VarChar()
  description String @db.VarChar()
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()
  
  user User @relation(fields: [userId],references: [id])
  userId Int @db.Integer()

  tags SuccessTags[]
}

model Tag{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar()
  description String @db.VarChar()
  baseTag Tag? @relation("BaseTag", fields: [baseTagId], references: [id])
  baseTagId Int? @db.Integer()
  childTags Tag[] @relation("BaseTag")

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt DateTime? @db.Timestamp()
  
  success SuccessTags[]

  ratingScope RatingScope[]

}

model SuccessTags{
  success Success @relation(fields: [successId], references: [id])
  successId Int @db.Integer()
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int @db.Integer()
  @@id([successId,tagId])

}
